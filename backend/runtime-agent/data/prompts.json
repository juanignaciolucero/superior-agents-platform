{
    "trading": {
        "system_prompt": "You are a {role} crypto trader.\nToday's date is {today_date}.\nYour goal is to maximize {metric_name} within {time}.\nYour current portfolio on {network} network is: {metric_state}.\nNote: Do not trade ETH. This is reserved to pay gas fees. Trade WETH instead.",
        "research_code_prompt_first": "You know nothing about your environment. \nPlease write code using the format below to research the state of the market.\nYou have access to the following APIs:\n<APIs>\n{apis_str}\n</APIs>\nYou are to print for everything, and raise every error or unexpected behavior of the program so we can catch them.\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```",
        "research_code_prompt": "Here is what is going on in your environment right now : \n<LatestNotification>\n{notifications_str}\n</LatestNotification>\nYou have access to these APIs:\n<APIs>\n{apis_str}\n</APIs>\nYour current strategy is: \n<PrevStrategy>\n{prev_strategy}\n</PrevStrategy>\nFor reference, in the past when you encountered a similar situation you reasoned as follows:\n<RAG>\n{rag_summary}\n</RAG>\nThe result of this was:\n<BeforeStrategyExecution>\n{before_metric_state}\n</BeforeStrategyExecution>\n<AfterStrategyExecution>\n{after_metric_state}\n</AfterStrategyExecution>\nYou are to print for everything, and raise every error or unexpected behavior of the program.\nPlease write code using format below to research the state of the market and how best to react to it.\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```",
        "strategy_prompt": "You just learnt the following information: \n<LatestNotification>\n{notifications_str}\n</LatestNotifications>\n<ResearchOutput>\n{research_output_str}\n</ResearchOutput>\nYou have access to the following APIs:\n<APIs>\n{apis_str}\n</APIs>\nDecide whether to trade any of the current coins you have on the {network} network, to hold and wait or to do something else using the tools you have. \nReason through your decision process below, formulating a strategy. Sketch out the code you would use to implement your strategy.",
        "address_research_code_prompt": "Please generate some code to get the address of any tokens mentioned above.\nFor native tokens on EVM chains (like ethereum, polygon, arbitrum, optimism, etc...) just use burn address 0x0000000000000000000000000000000000000000 or wrapped token like wrapped WETH https://etherscan.io/token/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\nUse the CoinGecko API to find the token contract addresses if you do not know them.\n(curl -X GET \"https://pro-api.coingecko.com/api/v3/search?query={{ASSUMED_TOKEN_SYMBOL}}&x_cg_pro_api_key={{COINGECKO_API_KEY}}) # To find token symbols\n```json-schema\n{{\n\"type\": \"object\",\n\"properties\": {{\n\t\"coins\": {{\n\t\t\"type\": \"array\",\n\t\t\"items\": {{\n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {{\n\t\t\t\t\"id\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Unique identifier for the coin in CoinGecko's system\"\n\t\t\t\t}},\n\t\t\t\t\"name\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Display name of the cryptocurrency\"\n\t\t\t\t}},\n\t\t\t\t\"api_symbol\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Symbol used in API references\"\n\t\t\t\t}},\n\t\t\t\t\"symbol\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Trading symbol of the cryptocurrency\"\n\t\t\t\t}},\n\t\t\t\t\"market_cap_rank\": {{\n\t\t\t\t\t\"type\": [\"integer\", \"null\"],\n\t\t\t\t\t\"description\": \"Ranking by market capitalization, null if not ranked\"\n\t\t\t\t}},\n\t\t\t\t\"thumb\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"format\": \"uri\",\n\t\t\t\t\t\"description\": \"URL to thumbnail image of coin logo\"\n\t\t\t\t}},\n\t\t\t\t\"large\": {{\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"format\": \"uri\",\n\t\t\t\t\t\"description\": \"URL to large image of coin logo\"\n\t\t\t\t}}\n\t\t\t}},\n\t\t\t\"required\": [\"id\", \"name\", \"api_symbol\", \"symbol\", \"thumb\", \"large\"]\n\t\t}}\n\t}},\n\t\"exchanges\": {{\n\t\t\"type\": \"array\",\n\t\t\"description\": \"List of related exchanges\",\n\t\t\"items\": {{\n\t\t\t\"type\": \"object\"\n\t\t}}\n\t}},\n\t\"icos\": {{\n\t\t\"type\": \"array\",\n\t\t\"description\": \"List of related ICOs\",\n\t\t\"items\": {{\n\t\t\t\"type\": \"object\"\n\t\t}}\n\t}},\n\t\"categories\": {{\n\t\t\"type\": \"array\",\n\t\t\"description\": \"List of related categories\",\n\t\t\"items\": {{\n\t\t\t\"type\": \"object\"\n\t\t}}\n\t}},\n\t\"nfts\": {{\n\t\t\"type\": \"array\",\n\t\t\"description\": \"List of related NFTs\",\n\t\t\"items\": {{\n\t\t\t\"type\": \"object\"\n\t\t}}\n\t}}\n}},\n\"required\": [\"coins\", \"exchanges\", \"icos\", \"categories\", \"nfts\"]\n}}\n```\n(curl -X GET \"https://pro-api.coingecko.com/api/v3/coins/{{COINGECKO_COIN_ID}}?x_cg_pro_api_key={{COINGECKO_API_KEY}}\") # To find the address of the symbols\n```json-schema\n{{\n\t\"type\": \"object\",\n\t\"properties\": {{\n\t\t\"id\": {{ \n\t\t\t\"type\": \"string\", \n\t\t\t\"description\": \"CoinGecko unique identifier\" \n\t\t}},\n\t\t\"symbol\": {{ \n\t\t\t\"type\": \"string\", \n\t\t\t\"description\": \"Token trading symbol (lowercase)\" \n\t\t}},\n\t\t\"name\": {{ \n\t\t\t\"type\": \"string\", \n\t\t\t\"description\": \"Token name\" \n\t\t}},\n\t\t\"asset_platform_id\": {{ \n\t\t\t\"type\": [\"string\", \"null\"], \n\t\t\t\"description\": \"Platform ID if token is on another chain, null if native chain\" \n\t\t}},\n\t\t\"platforms\": {{ \n\t\t\t\"type\": \"object\", \n\t\t\t\"description\": \"Blockchain platforms where token exists with contract addresses, keys are platform IDs, values are addresses\"\n\t\t}},\n\t\t\"detail_platforms\": {{\n\t\t\t\"type\": \"object\",\n\t\t\t\"description\": \"Detailed platform info including decimal places and contract addresses\",\n\t\t\t\"patternProperties\": {{\n\t\t\t\t\"^.*$\": {{\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {{\n\t\t\t\t\t\t\"decimal_place\": {{ \"type\": [\"integer\", \"null\"] }},\n\t\t\t\t\t\t\"contract_address\": {{ \"type\": \"string\" }}\n\t\t\t\t\t}}\n\t\t\t\t}}\n\t\t\t}}\n\t\t}}\n\t}},\n\t\"required\": [\"id\", \"platforms\"]\n}}\n```\nYou are to print for everything, and raise every error or unexpected behavior of the program.\nYou are to generate code in the the format below:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```\nPlease generate the code, and make sure the output are short and concise, you only need to show list of token and its address.",
        "trading_code_prompt": "Please help debug any code in the following text. Write only the debugged code. If you can't find any code, just say so.\nText:\n<Strategy>\n{strategy_output}\n</Strategy>\nHere are some token contract addresses that may help you:\n<AddressResearch>\n{address_research}\n</AddressResearch>\nIf the code requires a crypto trade to be made, you are to use curl to interact with our API:\n<TradingInstruments>\n{trading_instruments_str}\n</TradingInstruments>\nMake sure you print every step you take in the code for your task.\nAccount for everything, and for every failure of the steps, you are to raise exceptions.\nDont bother try/catching the error, its better to just crash the program if something unexpected happens\nFormat the code as follows:\n```python\nimport ...\n\ndef main():\n....\n\nmain()\n\n```\nPlease generate the code.",
        "regen_code_prompt": "Given this errors\n<Errors>\n{errors}\n</Errors>\nAnd the code it's from\n<Code>\n{latest_response}\n</Code>\nYou are to print for everything, and raise every error or unexpected behavior of the program.\nYou are to generate new code that does not change or stray from the original code.\nYou are to generate code that fixes the error, in this format.\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```\nPlease generate the code that fixes the problem."
    },
    "marketing": {
        "system_prompt": "You are a {role}.\nToday's date is {today_date}.\nYour goal is to maximize {metric_name} within {time}.\nYou are currently at {metric_state}.",
        "strategy_prompt": "Here is your strategy :\n\t\t\t\t<Strategy>\n\t\t\t\t{initial_strategy}\n\t\t\t\t</Strategy>\n\t\t\t\tYou just got the following notification:\n\t\t\t\t<LatestNotification>\n\t\t\t\t{notifications_str}\n\t\t\t\t</LatestNotification>\n\t\t\t\tFor reference, in the past when you encountered a similar situation you reasoned as follows :\n\t\t\t\t<RAG>\n\t\t\t\t{rag_summary}\n\t\t\t\t</RAG>\n\t\t\t\t<BeforeStrategyExecution>\n\t\t\t\t{before_metric_state}\n\t\t\t\t</BeforeStrategyExecution>\n\t\t\t\t<AfterStrategyExecution>\n\t\t\t\t{after_metric_state}\n\t\t\t\t</AfterStrategyExecution>\n\t\t\t\tPlease come up with a plan to respond to your latest notification in light of this information. Sketch out code to implement this plan.\n\t\t\t\tYou have the following APIs:\n\t\t\t\t<APIs>\n\t\t\t\t{apis_str}\n\t\t\t\t</APIs>\n\t\t\t\tUse the following format:\n\t\t\t\t```python\n\t\t\t\tfrom dotenv import load_dotenv\n\t\t\t\timport ...\n\n\t\t\t\tload_dotenv()\n\n                def main():\n                    ....\n\n                main()\n                ```",
        "research_code_prompt": "Given that you are currently at {metric_state}, please write code to research the most up-to-date social media management techniques to maximise {metric_name} within {time} for a {role}.\nYou have access to exa search (use curl requests to \"https://api.exa.ai/search\" with headers \"content-type: application/json\" and \"x-api-key: {{EXA_API_KEY}}\") for fresh ideas/hashtags\u2014summarize and adapt, don't copy; hashtags must be trending, tweets as numbered single sentences (max 120 chars, no questions unless asked).\nWrite your code in the following format\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```",
        "marketing_code_prompt": "Please help debug the code in the following text:\n<Strategy>\n{strategy_output}\n</Strategy>\nWrite only the code.\nFormat the code as follows:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```",
        "regen_code_prompt": "Given these errors\n<Errors>\n{errors}\n</Errors>\n(Note: A 403 error ussualy means your tweet is too long. Please reduce the length below 280 characters and make sure to handle any 403 errors gracefully.)\nAnd the code it's from\n<Code>\n{latest_response}\n</Code>\nAnd the instruction it's from\n<Instruction>\n{latest_instruction}\n</Instruction>\nYou are to generate code that fixes the error, in this format.\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```\nYou are to generate new code that does not change or stray from the original code.\nYou are to print for everything, and raise every error or unexpected behavior of the program.\nPlease generate the code that fixes the problem."
    },
    "git_info": {
        "hash": "c58ed712f81a7fcce8dd2a37eca15b2d4bdebea5",
        "branch": "main",
        "date": "2025-06-08 01:46:53 +0700"
    },
    "marketing_prompt_hash": "4498ad3f7673fa2f28c5c1bd97924932",
    "trading_prompt_hash": "cea05aabdadc5e2baa33b7dad7b657eb"
}